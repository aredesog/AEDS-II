üîπ 1. Bubble Sort (Ordena√ß√£o por "bolha")

O Bubble Sort compara elementos vizinhos e troca eles de posi√ß√£o quando est√£o fora de ordem.
A cada passada pelo vetor, o maior elemento "sobe" para o final, como se fosse uma bolha subindo na √°gua. Ele repete esse processo v√°rias vezes at√© n√£o precisar mais fazer trocas.

Ideia principal:
‚û°Ô∏è Ficar trocando pares vizinhos at√© tudo estar ordenado.

Vantagem:
Muito simples de entender.

Desvantagem:
Muito lento se o vetor for grande (faz muitas compara√ß√µes repetidas).



üîπ 2. Selection Sort (Ordena√ß√£o por "sele√ß√£o")

O Selection Sort percorre o vetor buscando o menor elemento e o coloca na primeira posi√ß√£o.
Depois busca o segundo menor e coloca na segunda posi√ß√£o‚Ä¶ e assim por diante.

Ele n√£o troca o tempo todo como o Bubble Sort ‚Äî ele procura primeiro quem √© o menor, e s√≥ ent√£o faz uma √∫nica troca.

Ideia principal:
‚û°Ô∏è Encontrar o menor elemento e coloc√°-lo no lugar certo a cada passo.

Vantagem:
Faz menos trocas que o Bubble Sort (geralmente s√≥ uma por rodada).

Desvantagem:
Continua tendo compara√ß√µes desnecess√°rias mesmo se o vetor j√° est√° quase ordenado.



üîπ 3. Insertion Sort (Ordena√ß√£o por "inser√ß√£o")

O Insertion Sort funciona como quando voc√™ organiza cartas na m√£o: voc√™ pega o pr√≥ximo elemento e insere na posi√ß√£o correta entre os que j√° est√£o ordenados.

Ele vai construindo a lista ordenada aos poucos, deslocando (empurrando) os elementos maiores para frente at√© encontrar a posi√ß√£o correta do novo elemento.

Ideia principal:
‚û°Ô∏è Pega um elemento e insere no ponto onde ele deveria estar.

Vantagens:
Muito eficiente quando o vetor j√° est√° quase ordenado.
Bom para vetores pequenos.

Desvantagem:
Ainda √© O(n¬≤) no pior caso (quando est√° totalmente bagun√ßado).